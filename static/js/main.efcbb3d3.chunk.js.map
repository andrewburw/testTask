{"version":3,"sources":["components/form.js","components/succesMsg.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","email","checkbox","checkResultEmail","checkResultCheckbox","handleChange","e","setState","target","value","checkInput","handleChangeCheckbox","handleSubmit","preventDefault","error","data","fetch","method","headers","body","JSON","stringify","then","response","json","props","console","log","val","customTest","reg","checkBox","test","length","msg","split","toLowerCase","inputClass","inputClassButton","inputMsg","undefined","this","className","inputClassCheckbox","inputCheckboxMsg","protectButton","disabled","src","alt","onClick","type","onChange","placeholder","id","htmlFor","href","React","Component","SuccesMsg","view","changeView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.efcbb3d3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/* ################  \r\n\r\n\r\n*/\r\n\r\n\r\n\r\nclass Form extends React.Component {\r\n   state = {\r\n       email: '',\r\n       checkbox: false,\r\n       checkResultEmail: {},\r\n       checkResultCheckbox: {}\r\n      \r\n\r\n   }\r\n\r\nhandleChange = (e) => {\r\n  \r\n  this.setState({email: e.target.value});\r\n   this.checkInput(e.target.value,'');\r\n}\r\n\r\nhandleChangeCheckbox = () => {\r\n  this.setState(state => ({\r\n    checkbox: !state.checkbox\r\n  }));\r\n   if (this.state.checkbox  === !true) {\r\n    \r\n    this.setState( {checkResultCheckbox: {}})\r\n   }\r\n \r\n\r\n}\r\n\r\nhandleSubmit = (e) => {\r\n   e.preventDefault()\r\n   this.checkInput('','buttonPress');\r\n  if ( this.state.checkResultEmail.error === false ||  this.state.checkResultCheckbox.error === false) {\r\n    \r\n \r\n   let data = {email: this.state.email}\r\n  fetch('php/addEmail.php', {\r\n    method: 'post',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(data)\r\n\r\n  }).then((response) => response.json())\r\n  .then((data) => {\r\n    \r\n     if (data.error === false) {\r\n      this.props.data(true)\r\n     } else {\r\n        console.log(data)\r\n     }\r\n\r\n  })\r\n}\r\n\r\n\r\n\r\n \r\n  console.log('run')\r\n}\r\n\r\ncheckInput = (val,customTest) =>{\r\n\r\n  const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    let email = {};\r\n    let checkBox = {};\r\n \r\n   let test = {\r\n       emtyField: function(val){\r\n         \r\n        email = val.length === 0 ? {error: true, msg: 'Email address is required'} : {error: false, msg: 'Good'};\r\n\r\n       },\r\n       regExChek: function(val){\r\n\r\n        email =  !reg.test(val) ? {error: true, msg: 'Please provide a valid e-mail address'} : {error: false, msg: 'Good'};\r\n        \r\n           \r\n      },\r\n      checkDomain: function(val){\r\n         /* simple solution.Of course I can use Regex to check \"CA\" domain,\r\n            but now you can simple add array (and array cheker) with not allowed domains.\r\n        */ \r\n         if (reg.test(val)) {\r\n          email =  val.split('.')[1].toLowerCase() === 'ca' ?\r\n          {error: true, msg: 'We are not accepting subscriptions from Colombia'} : {error: false, msg: 'Good'};\r\n         }\r\n       \r\n      },\r\n      checkChekbox: (val) => { \r\n         \r\n        checkBox  = !val ? {error: true, msg: 'You must accept the terms and conditions'} : {error: false, msg: 'Good'}\r\n          \r\n      }\r\n\r\n   }\r\n    \r\n\r\n\r\n     if (customTest !== '' && customTest === 'buttonPress') { // custom field check (for submit button)\r\n      \r\n      test.checkChekbox(this.state.checkbox);\r\n      test.emtyField(this.state.email);\r\n\r\n\r\n       \r\n\r\n      this.setState( {checkResultEmail: email,\r\n                      checkResultCheckbox: checkBox, \r\n                      });\r\n    } else {\r\n            \r\n      test.regExChek(val);\r\n      test.checkDomain(val);\r\n\r\n      this.setState( {checkResultEmail: email});\r\n     \r\n     \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n  render() {\r\n\r\n   \r\n     /*  Input Field VISUALS*/\r\n    \r\n     let inputClass = 'input';\r\n     let inputClassButton = 'input';\r\n     let inputMsg = '';   \r\n     \r\n            \r\n     if(this.state.checkResultEmail.error !== undefined && this.state.checkResultEmail.error === true){\r\n      inputClass = 'is-invalid';\r\n      inputClassButton = 'is-invalid-button';\r\n      inputMsg = <small className=\"invalid-feedback\">{this.state.checkResultEmail.msg}</small>\r\n\r\n     } /*else if (this.state.checkResultEmail.error !== undefined && this.state.checkResultEmail.error === false){\r\n        inputClass = 'is-valid';\r\n        inputClassButton = 'is-valid-button';\r\n        inputMsg = <small className=\"valid-feedback\">OK.</small>\r\n\r\n     }  */\r\n    /*  chekbox Field VISUALS*/\r\n     let inputClassCheckbox = 'input';\r\n     let inputCheckboxMsg = '';   \r\n      \r\n     if(this.state.checkResultCheckbox.error !== undefined && this.state.checkResultCheckbox.error === true){\r\n      inputClassCheckbox = 'is-invalid-checkbox';\r\n      inputCheckboxMsg = <small className=\"invalid-feedback\">{ this.state.checkResultCheckbox.msg}</small>\r\n\r\n     } /*else if (this.state.checkResultCheckbox !== undefined && this.state.checkResultCheckbox.error === false){\r\n       \r\n      inputClassCheckbox = 'is-valid-checkbox';\r\n      inputCheckboxMsg = '';\r\n\r\n     } */\r\n\r\n    let protectButton = this.state.checkResultEmail.error === true ||  this.state.checkResultCheckbox.error === true? \r\n    \r\n    <button className={inputClassButton}  disabled> <img src=\"../images/ic_arrow.png\" alt=\"arrow\" /></button> : \r\n    <button className={inputClassButton} onClick={this.handleSubmit} > <img src=\"../images/ic_arrow.png\" alt=\"arrow\" /></button>;\r\n       \r\n    return  <div><main className=\"form__field\">\r\n    <div className=\"wecome__msg\">\r\n\r\n\r\n      <h1>Subscribe to newsletter</h1>\r\n      <p className=\"form__field-p\">Subscribe to our newsletter and get 10% discount on pineapple glasses.</p>\r\n    </div>\r\n\r\n   \r\n    <div className=\"form__input-container\">\r\n      <form>\r\n    <div className=\"inputGrup\">\r\n      <div className=\"input__plus-button\">\r\n        <input type=\"email\" className={inputClass} onChange={this.handleChange} placeholder=\"Type your email address hereâ€¦\" />\r\n        {protectButton}\r\n      </div>\r\n      {inputMsg }\r\n    </div>\r\n     <div>\r\n\r\n\r\n    <div className=\"checkbox__container\">\r\n      <div className=\"round \">\r\n        <input type=\"checkbox\" id=\"checkbox\" />\r\n        <label className={inputClassCheckbox} htmlFor=\"checkbox\" onClick={this.handleChangeCheckbox}></label>\r\n        <div className=\"chebox__lable\">I agree to <a href=\"1\">terms of service</a></div>\r\n      </div>\r\n         { inputCheckboxMsg}\r\n        \r\n     </div>\r\n    </div>\r\n\r\n  </form>  \r\n            </div>\r\n          </main> <div className=\"line__container\">\r\n          <hr className=\"line\" />\r\n        </div></div>\r\n  }\r\n}\r\n\r\nexport default  Form;\r\n","import React from 'react';\r\n\r\n\r\n\r\nclass SuccesMsg extends React.Component {\r\n  render() {\r\n         \r\n    return  <div> <section className=\"succes__msg\">\r\n    <object type=\"image/svg+xml\" data=\"images/ic_success.svg\"> Your browser does not support SVG</object>\r\n       <div className=\"succes__msg-text\">\r\n         <h1>Thanks for subscribing!</h1>\r\n         <p>You have successfully subscribed to our email listing. Check your email for the discount code.</p>\r\n\r\n       </div>\r\n\r\n </section>\r\n <div className=\"bring__social_to\">\r\n          <hr className=\"line\" />\r\n        </div>\r\n \r\n </div>\r\n  }\r\n}\r\n\r\nexport default  SuccesMsg;\r\n","import React from 'react';\nimport FormTmpl from './components/form';\nimport SuccessMsg from './components/succesMsg'\n\nclass Form extends React.Component {\n     state = {\n       view: 'form'\n\n     }\n           \n  changeView = () => {\n\n  // this.setState({view: 'msg'})\n\n  }  \n    \n  render() {\n   \n       \n    return  <div>{this.state.view === 'msg' ? <SuccessMsg /> : <FormTmpl data={this.changeView} />}</div>\n  }\n}\n\nexport default  Form;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}